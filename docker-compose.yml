version: "3.9"

services:
  messages-db:
    image: postgres:14
    container_name: messages-db
    hostname: messages-db
    environment:
      POSTGRES_DB: "legendarydb"
      POSTGRES_USER: "dbuser"
      POSTGRES_PASSWORD: "dbpassword"
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]
    mem_limit: 2gb
    shm_size: 2gb 
    ports:
      - 5435:5432
    volumes:
      - ./Postgres/messages:/docker-entrypoint-initdb.d # Инициализация таблиц
      - ./Postgres/postgresql.conf:/etc/postgresql/postgresql.conf
      - postgres-messages-data:/var/lib/postgresql/data
    networks:
      - legendary-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d legendarydb"]
      interval: 30s
      timeout: 10s
      retries: 5
  postgresql-master:
    container_name: postgresql-master
    image: 'docker.io/bitnami/postgresql:11-debian-10'
    ports:
      - '5432:5432'
    volumes:
      - postgresql_master_data:/bitnami/postgresql
      - ./Postgres/main:/docker-entrypoint-initdb.d # Инициализация таблиц
    environment:
      - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
      - POSTGRESQL_LOG_HOSTNAME=true
      - POSTGRESQL_REPLICATION_MODE=master
      - POSTGRESQL_REPLICATION_USER=repl_user
      - POSTGRESQL_REPLICATION_PASSWORD=repl_password
      - POSTGRESQL_USERNAME=dbuser
      - POSTGRESQL_DATABASE=legendarydb
      - ALLOW_EMPTY_PASSWORD=yes
    networks:
      - legendary-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U dbuser -d legendarydb"]
      interval: 30s
      timeout: 10s
      retries: 5
  postgresql-slave1:
      container_name: postgresql-slave1
      image: 'docker.io/bitnami/postgresql:11-debian-10'
      ports:
        - 5433:5432
      depends_on:
       postgresql-master:
          condition: service_healthy
      environment:
        - POSTGRESQL_USERNAME=dbuser
        - POSTGRESQL_DATABASE=legendarydb
        - POSTGRESQL_MASTER_HOST=postgresql-master
        - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
        - POSTGRESQL_LOG_HOSTNAME=true
        - POSTGRESQL_REPLICATION_MODE=slave
        - POSTGRESQL_REPLICATION_USER=repl_user
        - POSTGRESQL_REPLICATION_PASSWORD=repl_password
        - POSTGRESQL_MASTER_PORT_NUMBER=5432
        - ALLOW_EMPTY_PASSWORD=yes
      networks:
      - legendary-network
  postgresql-slave2:
      container_name: postgresql-slave2
      image: 'docker.io/bitnami/postgresql:11-debian-10'
      ports:
        - 5434:5432
      depends_on:
       postgresql-master:
          condition: service_healthy
      environment:
        - POSTGRESQL_USERNAME=dbuser
        - POSTGRESQL_DATABASE=legendarydb
        - POSTGRESQL_MASTER_HOST=postgresql-master
        - POSTGRESQL_PGAUDIT_LOG=READ,WRITE
        - POSTGRESQL_LOG_HOSTNAME=true
        - POSTGRESQL_REPLICATION_MODE=slave
        - POSTGRESQL_REPLICATION_USER=repl_user
        - POSTGRESQL_REPLICATION_PASSWORD=repl_password
        - POSTGRESQL_MASTER_PORT_NUMBER=5432
        - ALLOW_EMPTY_PASSWORD=yes
      networks:
      - legendary-network
  haproxy-lb:
    image: haproxy:2.4
    container_name: haproxy-lb
    restart: "no"
    volumes:
      - ./load-balance/haproxy.cfg:/usr/local/etc/haproxy/haproxy.cfg
    ports:
      - 5002:5002
      - 7002:7002
    depends_on:
      - postgresql-master
      - postgresql-slave1
      - postgresql-slave2
    networks:
      - legendary-network
  legendary-api1:
    image: legendary-api-image
    build:
      context: ./src
      dockerfile: LegendarySocialNetwork.WebApi/Dockerfile
    container_name: legendary-api1
    restart: always
    environment:
      # Основные настройки для работы API
      ASPNETCORE_URLS: "http://+:80"
      AllowedHosts: "*" # Ограничивает хосты, которые могут подключаться к API. По умолчанию - все
      # Строка подключения к базе данных Postgres
      DatabaseSettings:MasterConnStr: "Host=haproxy-lb;Port=5002;Username=dbuser;Database=legendarydb;Pooling=true;"
      DatabaseSettings:ReplicaConnStr1: "Host=haproxy-lb;Port=5003;Username=dbuser;Database=legendarydb;Pooling=true;"
      JWTSettings:Key: "superSecretKey@34512312312312312"
      JWTSettings:Issuer: legendary.social.network
      JWTSettings:Audience: legendary.social.network
      JWTSettings:DurationInMinutes: "60"
      Kafka:Host: kafka:29092
      Kafka:UpdateFeedTopic: update-feed-posts
      Kafka:UpdateFeedGroup: update-feed-group
      Kafka:PushFeedTopic: push-feed-topic
      Kafka:PushFeedGroup: push-feed-group
      Kafka:CreateMessageTopic: create-message-topic
      Kafka:InitSagaTopic: init-saga-topic
      Kafka:IncrementCounterTopic: increment-counter-topic
      Kafka:DecrementCounterTopic: decrement-counter-topic
      Kafka:MessageCreatedTopic: message-created-topic
      Kafka:MessageFailedTopic: message-failed-topic
      Redis:ConnectionString: redis:6379,password=123b
      Messages:Api: http://messages-api
      Messages:ApiVersion: 1
    ports:
      - 7888:80
    mem_limit: 1024m
    entrypoint: dotnet LegendarySocialNetwork.WebApi.dll
    depends_on:
       postgresql-master:
          condition: service_started
       kafka:
          condition: service_started
       redis:
          condition: service_started
    networks:
      - legendary-network
  legendary-api2:
    image: legendary-api-image
    build:
      context: ./src
      dockerfile: LegendarySocialNetwork.WebApi/Dockerfile
    container_name: legendary-api2
    restart: always
    environment:
      # Основные настройки для работы API
      ASPNETCORE_URLS: "http://+:80"
      AllowedHosts: "*" # Ограничивает хосты, которые могут подключаться к API. По умолчанию - все
      # Строка подключения к базе данных Postgres
      DatabaseSettings:MasterConnStr: "Host=haproxy-lb;Port=5002;Username=dbuser;Database=legendarydb;Pooling=true;"
      DatabaseSettings:ReplicaConnStr1: "Host=haproxy-lb;Port=5003;Username=dbuser;Database=legendarydb;Pooling=true;"
      JWTSettings:Key: "superSecretKey@34512312312312312"
      JWTSettings:Issuer: legendary.social.network
      JWTSettings:Audience: legendary.social.network
      JWTSettings:DurationInMinutes: "60"
      Kafka:Host: kafka:29092
      Kafka:UpdateFeedTopic: update-feed-posts
      Kafka:UpdateFeedGroup: update-feed-group
      Kafka:PushFeedTopic: push-feed-topic
      Kafka:PushFeedGroup: push-feed-group
      Kafka:CreateMessageTopic: create-message-topic
      Kafka:IncrementCounterTopic: increment-counter-topic
      Kafka:DecrementCounterTopic: decrement-counter-topic
      Kafka:InitSagaTopic: init-saga-topic
      Kafka:MessageCreatedTopic: message-created-topic
      Kafka:MessageFailedTopic: message-failed-topic
      Redis:ConnectionString: redis:6379,password=123b
      Messages:Api: http://messages-api
      Messages:ApiVersion: 1
    ports:
      - 7889:80
    mem_limit: 1024m
    entrypoint: dotnet LegendarySocialNetwork.WebApi.dll
    depends_on:
       postgresql-master:
          condition: service_started
       kafka:
          condition: service_started
       redis:
          condition: service_started
    networks:
      - legendary-network
  nginx:
    image: nginx:latest
    container_name: nginx
    volumes:
      - ./load-balance/nginx.conf:/etc/nginx/nginx.conf
    ports:
      - 80:80
    depends_on:
      - legendary-api1
      - legendary-api2
    networks:
      - legendary-network
  redis:
    image: "redis:alpine"
    container_name: 'redis'
    command: redis-server --requirepass 123b
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/var/lib/redis
      - ./volumes/config/redis.conf:/usr/local/etc/redis/redis.conf
    environment:
      - REDIS_REPLICATION_MODE=master
    networks:
      - legendary-network
  kafka:
    image: confluentinc/cp-kafka:7.8.0
    container_name: kafka
    hostname: kafka
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
     KAFKA_NODE_ID: 1
     KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: 'CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT'
     KAFKA_ADVERTISED_LISTENERS: 'PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092'
     KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
     KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
     KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
     KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
     KAFKA_JMX_PORT: 9101
     KAFKA_JMX_HOSTNAME: localhost
     KAFKA_PROCESS_ROLES: 'broker,controller'
     KAFKA_CONTROLLER_QUORUM_VOTERS: '1@kafka:29093'
     KAFKA_LISTENERS: 'PLAINTEXT://kafka:29092,CONTROLLER://kafka:29093,PLAINTEXT_HOST://0.0.0.0:9092'
     KAFKA_INTER_kafka_LISTENER_NAME: 'PLAINTEXT'
     KAFKA_CONTROLLER_LISTENER_NAMES: 'CONTROLLER'
     KAFKA_LOG_DIRS: '/tmp/kraft-combined-logs'
     CLUSTER_ID: 'MkU3OEVBNTcwNTJENDM2Qk'
    networks:
      - legendary-network
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    environment:
      KAFKA_CLUSTERS_0_NAME: "local"
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: "kafka:29092"
    ports:
      - "8080:8080"
    networks:
      - legendary-network
    depends_on:
      - kafka
  messages-api:
    image: messages-api-image
    build:
      context: ./src
      dockerfile: LegendarySocialNetwork.Messages/Dockerfile
    container_name: messages-api
    restart: always
    environment:
      # Основные настройки для работы API
      ASPNETCORE_URLS: "http://+:80"
      AllowedHosts: "*" 
      DatabaseSettings:CitusConnStr: "Host=messages-db;Port=5432;Username=dbuser;Password=dbpassword;Database=legendarydb;Pooling=true;Maximum Pool Size=1450;Minimum Pool Size=300;Timeout=600;CommandTimeout=600;Connection Idle Lifetime=300;Connection Pruning Interval=10;Keepalive=60;TCP Keepalive Time=60;TCP Keepalive Interval=10"
      DatabaseSettings:ShardsNode: 16
      Tarantool:ConnStr: tarantool:tarantool@tarantool:3301
      JWTSettings:Key: "superSecretKey@34512312312312312"
      JWTSettings:Issuer: legendary.social.network
      JWTSettings:Audience: legendary.social.network
      Kafka:Host: kafka:29092
      Kafka:CreateMessageTopic: create-message-topic
      Kafka:CreateMessageGroup: create-message-group
      Kafka:MessageCreatedTopic: message-created-topic
      Kafka:MessageFailedTopic: message-failed-topic
    ports:
      - 7887:80
    depends_on:
       messages-db:
          condition: service_healthy
    mem_limit: 2048m
    entrypoint: dotnet LegendarySocialNetwork.Messages.dll
    networks:
      - legendary-network
  counter-api:
    image: counter-api-image
    build:
      context: ./src
      dockerfile: LegendarySocialNetwork.Counter/Dockerfile
    container_name: counter-api
    restart: always
    environment:
      # Основные настройки для работы API
      ASPNETCORE_URLS: "http://+:80"
      AllowedHosts: "*" 
      JWTSettings:Key: "superSecretKey@34512312312312312"
      JWTSettings:Issuer: legendary.social.network
      JWTSettings:Audience: legendary.social.network
      Tarantool:ConnStr: tarantool:tarantool@tarantool:3301
      Kafka:Host: kafka:29092
      Kafka:IncrementCounterTopic: increment-counter-topic
      Kafka:IncrementCounterGroup: increment-counter-group
      Kafka:DecrementCounterTopic: decrement-counter-topic
      Kafka:DecrementCounterGroup: decrement-counter-group
    ports:
      - 7886:80
    mem_limit: 2048m
    entrypoint: dotnet LegendarySocialNetwork.Counter.dll
    networks:
      - legendary-network
  tarantool:
    build:
      context: .
      dockerfile: Tarantool/Dockerfile
    container_name: tarantool
    hostname: tarantool
    environment:
      TARANTOOL_USER_NAME: tarantool
      TARANTOOL_USER_PASSWORD: tarantool
      PG_HOST: messages-db
      PG_USER: dbuser
      PG_PASSWORD: dbpassword
      PG_DATABASE: legendarydb
      PG_PORT: 5432
    volumes:
      - tarantool-data:/var/lib/tarantool
      - ./Tarantool:/usr/local/share/tarantool/init
    command: tarantool /usr/local/share/tarantool/init/init.lua
    ports:
        - 3301:3301
    depends_on:
       messages-db:
          condition: service_healthy
    networks:
      - legendary-network
  tarantool-admin:
    image: quay.io/basis-company/tarantool-admin
    container_name: tarantool-admin
    hostname: tarantool-admin
    ports: 
        - 8000:80
    networks:
      - legendary-network
  # legendary-react-app:
  #   build:
  #     context: ./client
  #     dockerfile: Dockerfile
  #   container_name: legendary-react-app
  #   ports:
  #     - 3000:80
  #   networks:
  #     - legendary-network  
volumes:
  kafka-data:
  healthcheck-volume:
  redis-data:
  postgresql_master_data:
  postgres-messages-data:
  tarantool-data:
networks:
  legendary-network:
    driver: bridge

